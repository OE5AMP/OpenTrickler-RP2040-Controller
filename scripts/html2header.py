import argparse
import logging
import sys
import os
import minify_html  # 3rd party package


C_HEADER_TEMPLATE = """// ---------------------------------------------------------- //
// This file is autogenerated by html2header.py; do not edit! //
// ---------------------------------------------------------- //

#ifndef {capitalized_filename}_H_
#define {capitalized_filename}_H_

const char html_{lowercase_filename}[] = "{html_string}";

#endif  //  {capitalized_filename}_H_
"""
 

def main(input_filepth, output_filepath):
    logging.debug(f"Input path: {input_filepth}, output path: {output_filepath}")

    with open(input_filepth) as fp:
        input_file = fp.read()

    # Minify the HTML with the javascript
    minified_html = minify_html.minify(input_file, 
                                       do_not_minify_doctype=True, 
                                       minify_js=True,
                                       minify_css=True, 
                                       keep_html_and_head_opening_tags=False, 
                                       keep_closing_tags=False)
    logging.debug(minified_html)

    # Escape characters
    escaped_html = minified_html.replace("\\", "\\\\").replace('"', '\\"').replace("'", "\\'").replace("\n", "\\\n")

    filename = os.path.basename(input_filepth)
    filename_without_ext, ext = os.path.splitext(filename)
    
    c_header_string = C_HEADER_TEMPLATE.format(
        capitalized_filename=filename_without_ext.upper(),
        lowercase_filename=filename_without_ext.lower(),
        html_string=escaped_html,
    )
    logging.debug(c_header_string)

    # Write to the file
    output_full_filename = os.path.join(output_filepath, f"{filename}.h")
    with open(output_full_filename, "w") as fp:
        fp.write(c_header_string)

    input_len = len(input_file)
    output_data_len = len(escaped_html)
    logging.info(f"Input HTML includes {input_len} bytes, the output escaped HTML includes {output_data_len} bytes")

    return 0



if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument('-f', '--input_filepath', help="Filepath to the HTML file that need to be converted to C header", required=True)
    parser.add_argument('-o', '--output_filepath', help="The output path. The filename shall remain the same, with .h suffix.", required=True)
    parser.add_argument('-v', '--verbose', action='count', default=0)

    args = parser.parse_args()

    logging_levels = {0: logging.ERROR,
                      1: logging.DEBUG,
                      2: logging.INFO,
                      3: logging.WARNING,
                      4: logging.ERROR,
                      5: logging.CRITICAL}
    
    logging.basicConfig(stream=sys.stdout, level=logging_levels[args.verbose])


    main(args.input_filepath, args.output_filepath)
